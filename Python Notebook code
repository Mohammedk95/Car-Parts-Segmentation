# Car Parts Segmentation using YOLOv8

This project focuses on segmenting car parts in images using the YOLOv8 segmentation model. The model is trained on a custom dataset and can accurately detect and segment car parts such as wheels, doors, mirrors, headlights, and bumpers. The project is implemented in a Google Colab notebook, leveraging the power of **Google Colab Pro with an A100 GPU** for fast training and inference.

---

## Google Colab Notebook
You can access and run the full code in the Google Colab notebook below. The notebook includes all the steps, from installing dependencies to training, validation, and prediction.

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1sJoWCRZ06s4Gno-pHOhQi0l03Ffu1Y9x?usp=sharing)

---

## Project Overview
The project consists of the following steps:

1. **Install Dependencies**:
   - Install the Ultralytics library for YOLOv8.

2. **Train the Model**:
   - Train the YOLOv8 segmentation model on a custom dataset of car parts.

3. **Validate the Model**:
   - Evaluate the model's performance using metrics like mAP (mean Average Precision).

4. **Predict on New Images**:
   - Use the trained model to segment car parts in new, unseen images.

---

## Code Highlights
### 1. Install Dependencies
```python
!pip install ultralytics -q
```

### 2. Train the Model
```python
from ultralytics import YOLO

# Load a pre-trained YOLOv8 Nano segmentation model
model = YOLO("yolov8n-seg.pt")

# Train the model
results = model.train(
    data="carparts-seg.yaml",  # Path to dataset configuration file
    epochs=50,                # Number of training epochs
    imgsz=640,                # Image size for training
    project="carparts-seg",   # Save results in a specific project folder
    name="train-v1",          # Name of the training run
)
```

### 3. Validate the Model
```python
# Validate the model
metrics = model.val(
    split="val",  # Validate on the validation set
    conf=0.5,    # Confidence threshold for validation
)
print(metrics)   # Print evaluation metrics (mAP, precision, recall, etc.)
```

### 4. Predict on New Images
```python
# Mount Google Drive to access external images
from google.colab import drive
drive.mount('/content/drive')

# Load the best trained model
best_model = YOLO("carparts-seg/train-v1/weights/best.pt")

# Path to the folder containing images for prediction
predict_images_path = "/content/drive/MyDrive/Predict Images/"

# Predict on images with resizing
results = best_model.predict(
    source=predict_images_path,  # Path to the folder with images
    imgsz=640,                  # Resize images to 640x640 before prediction
    save=True,                  # Save the prediction results
    save_txt=True,             # Save the prediction labels (optional)
    conf=0.5,                  # Confidence threshold (optional)
)

# Display results
for result in results:
    result.show()  # Show the prediction results
```

---

## Results
- **Training**: The model is trained for **50 epochs** with an image size of 640x640.
- **Validation**: The model achieves high accuracy, as measured by mAP@0.5 and mAP@0.5:0.95.
- **Prediction**: The model can accurately segment car parts in new images, even under challenging conditions.

---

## Notes
- **Prediction Results**: The output of the prediction step (e.g., segmented images) is **only for visualization purposes**. It helps in understanding the model's performance and does not represent any quantitative evaluation.
- **Hardware**: This project utilizes **Google Colab Pro with an A100 GPU** for faster training and inference.

---

## How to Use
1. Open the Google Colab notebook using the link above.
2. Follow the steps in the notebook to install dependencies, train the model, validate it, and predict on new images.
3. Replace the dataset and image paths with your own data if needed.

---

## Acknowledgments
- [Ultralytics](https://docs.ultralytics.com/datasets/segment/carparts-seg/) for the YOLOv8 implementation and dataset reference.
- Google Colab Pro for providing access to high-performance A100 GPUs.

